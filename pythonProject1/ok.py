import telebot
import config
import random
from telebot import types
bot = telebot.TeleBot(config.TOKEN)

pairs = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


custom_commands = [
    types.BotCommand("start", "–ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"),
    types.BotCommand("marry", "–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–∞–∫–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è"),
    types.BotCommand("propose", "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±—Ä–∞–∫"),
    types.BotCommand("accept", "–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –±—Ä–∞–∫"),
    types.BotCommand("check_marriage", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∂–µ–Ω–∏–≤—à–∏—Ö—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),

]
bot.set_my_commands(custom_commands)

@bot.message_handler(commands=['start'])
def welcome(message):
    sti = open('image/wel.tgs', 'rb')
    bot.send_sticker(message.chat.id, sti)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.ReplyKeyboardRemove()

    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç–∏–∫–∏, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, —è –ª—é–±–ª—é –ø–∏—Ä–æ–∂–∫–∏!!".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['marry'])
def start_marry(message):
    chat_id = message.chat.id
    if chat_id not in pairs:
        pairs[chat_id] = {}
    bot.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ, —Å –∫–µ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∂–µ–Ω–∏—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏—Ç–µ /propose @username")

@bot.message_handler(commands=['propose'])
def propose(message):
    chat_id = message.chat.id
    if chat_id not in pairs:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –±—Ä–∞–∫–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /marry")
        return
    if message.reply_to_message is None or message.reply_to_message.from_user is None:
        bot.send_message(chat_id, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –±—Ä–∞–∫")
        return
    user_id = message.from_user.id
    spouse_id = message.reply_to_message.from_user.id
    pairs[chat_id][user_id] = spouse_id
    pairs[chat_id][spouse_id] = user_id
    bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.reply_to_message.from_user.username} –ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –±—Ä–∞–∫. "
                               f"–ï—Å–ª–∏ –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã, –Ω–∞–ø–∏—à–∏—Ç–µ /accept")

@bot.message_handler(commands=['accept'])
def accept_proposal(message):
    chat_id = message.chat.id
    user_id = message.from_user.id
    if chat_id not in pairs or user_id not in pairs[chat_id]:
        bot.send_message(chat_id, "–ù–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –±—Ä–∞–∫ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    else:
        spouse_id = pairs[chat_id][user_id]
        user_username = bot.get_chat_member(chat_id, user_id).user.username
        spouse_username = bot.get_chat_member(chat_id, spouse_id).user.username
        bot.send_message(chat_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –±—Ä–∞–∫! "
                                  f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –Ω–æ–≤–æ–π —Å–µ–º–µ–π–Ω–æ–π –∂–∏–∑–Ω—å—é! –í–∞—à–∞ –ø–∞—Ä–∞: @{spouse_username}")

@bot.message_handler(commands=['check_marriage'])
def check_marriage(message):
    chat_id = message.chat.id
    if chat_id not in pairs or not pairs[chat_id]:
        bot.send_message(chat_id, "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∫–∞ —á—Ç–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–∂–µ–Ω–∏–ª—Å—è")
    else:
        married_users = set()  # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–∞—Ä

        for user_id, spouse_id in pairs[chat_id].items():
            user_username = bot.get_chat_member(chat_id, user_id).user.username
            spouse_username = bot.get_chat_member(chat_id, spouse_id).user.username

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä—Ç–µ–∂ (–ø–∞—Ä—É) –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–æ
            married_users.add((user_username, spouse_username))

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ø–∞—Ä—ã
        response_message = "–í —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –ø–æ–∂–µ–Ω–∏–ª–∏—Å—å:\n" + "\n".join([f"@{user} –∏ @{spouse}" for user, spouse in married_users])
        bot.send_message(chat_id, response_message)
import re

@bot.message_handler(func=lambda message: re.search(r'\b–£–¥–∞—Ä–∏—Ç—å\b', message.text, re.IGNORECASE) is not None)
def hit_action(message):
    chat_id = message.chat.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message is not None:
        target_user_id = message.reply_to_message.from_user.id
        bot.send_message(chat_id, f"–í—ã —É–¥–∞—Ä–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.reply_to_message.from_user.username}! Ouchü§úüòµ‚Äçüí´!")
    else:
        bot.send_message(chat_id, "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è '—É–¥–∞—Ä–∏—Ç—å' –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


@bot.message_handler(func=lambda message: re.search(r'\b–û–±–Ω—è—Ç—å\b', message.text, re.IGNORECASE) is not None)
def hug_action(message):
    chat_id = message.chat.id
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    sender_user = message.from_user
    sender_username = f"@{sender_user.username}" if sender_user.username else sender_user.first_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message is not None:
        target_user = message.reply_to_message.from_user
        target_username = f"@{target_user.username}" if target_user.username else target_user.first_name
        bot.send_message(chat_id, f"{sender_username} –æ–±–Ω—è–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username}! ü§ó‚ù§Ô∏è")
    else:
        bot.send_message(chat_id, "–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è '–æ–±–Ω—è—Ç—å' –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


bot.polling()
